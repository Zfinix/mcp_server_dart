// GENERATED CODE - DO NOT MODIFY BY HAND
// dart format width=80

// **************************************************************************
// MCPGenerator
// **************************************************************************

// ignore_for_file: type=lint
part of 'weather_service.dart';

/// Generated extension for [WeatherServiceMCP] that automatically registers
/// all annotated MCP tools, resources, and prompts with the server.
///
/// This code is automatically generated by the MCP Dart framework.
/// Do not modify this file directly - instead, modify the source
/// class and run `dart run build_runner build` to regenerate.
extension WeatherServiceMCPGenerated on WeatherServiceMCP {
  /// Registers all MCP handlers that were annotated in the source class.
  /// This method is automatically called during server initialization.
  void registerGeneratedHandlers() {
    // Register handler for @MCPTool('get_current_weather')
    registerTool(
      'get_current_weather',
      (context) async {
        final location = context.param<String>('location');
        final unit = context.optionalParam<String>('unit') ?? 'celsius';
        final includeExtended =
            context.optionalParam<bool>('includeExtended') ?? false;
        return await getCurrentWeather(
          location,
          unit: unit,
          includeExtended: includeExtended,
        );
      },
      description: 'Get current weather for a location',
      inputSchema: {
        'type': 'object',
        'properties': {
          'location': {'type': 'string', 'description': 'Location parameter'},
          'unit': {'type': 'string', 'description': 'Unit parameter'},
          'includeExtended': {
            'type': 'boolean',
            'description': 'IncludeExtended parameter',
          },
        },
        'required': ['location'],
      },
    );

    // Register handler for @MCPTool('get_weather_alerts')
    registerTool(
      'get_weather_alerts',
      (context) async {
        final location = context.param<String>('location');
        final severity = context.optionalParam<String>('severity') ?? null;
        return await getWeatherAlerts(location, severity: severity);
      },
      description: 'Get weather alerts for a location',
      inputSchema: {
        'type': 'object',
        'properties': {
          'location': {'type': 'string', 'description': 'Location parameter'},
          'severity': {'type': 'string', 'description': 'Severity parameter'},
        },
        'required': ['location'],
      },
    );

    // Register handler for @MCPTool('search_locations')
    registerTool(
      'search_locations',
      (context) async {
        final query = context.param<String>('query');
        final limit = context.optionalParam<int>('limit') ?? 10;
        return await searchLocations(query, limit: limit);
      },
      description: 'Search for weather locations',
      inputSchema: {
        'type': 'object',
        'properties': {
          'query': {'type': 'string', 'description': 'Query parameter'},
          'limit': {'type': 'integer', 'description': 'Limit parameter'},
        },
        'required': ['query'],
      },
    );

    // Register handler for @MCPResource('weather_stations')
    registerResource('weather_stations', (uri) async {
      return await getWeatherStations(uri);
    });

    // Register handler for @MCPPrompt('weather_report')
    registerPrompt('weather_report', (args) {
      return weatherReportPrompt(args);
    });
  }

  /// Generates standardized usage documentation for MCP servers.
  ///
  /// This helper method provides consistent help text formatting
  /// for this specific MCP server with its available capabilities.
  void showUsage({String? serverName}) {
    print('Usage: dart ${serverName ?? "server"}.dart [options]');
    print('');
    print('Options:');
    print('  --stdio        Start server in stdio mode (default)');
    print('  --http         Start HTTP server on port 8080');
    print('  --port <port>  Specify HTTP port (default: 8080)');
    print('  --help, -h     Show this help message');
    print('');
    print(
      'Available tools: get_current_weather, get_weather_alerts, search_locations',
    );
    print('Available resources: weather_stations');
    print('Available prompts: weather_report');
    print('');
    print('Examples:');
    print('  dart ${serverName ?? "server"}.dart');
    print('  dart ${serverName ?? "server"}.dart --http');
    print('  dart ${serverName ?? "server"}.dart --http --port 3000');
  }
}
