// GENERATED CODE - DO NOT MODIFY BY HAND
// dart format width=80

// **************************************************************************
// MCPGenerator
// **************************************************************************

// ignore_for_file: type=lint
part of 'resource_test.dart';

/// Generated extension for [ResourceTestMCP] that provides automatic registration
/// of all annotated MCP tools, resources, and prompts.
///
/// This code is automatically generated by the MCP Dart framework.
/// Do not modify this file directly - instead, modify the source
/// class and run `dart run build_runner build` to regenerate.
extension ResourceTestMCPRegistration on ResourceTestMCP {
  /// Registers all generated handlers for annotated methods.
  /// Call this method in your constructor to automatically register
  /// all MCP tools, resources, and prompts.
  void registerGeneratedHandlers() {
    // Register handler for @MCPResource('userProfile')

    registerResource('userProfile', (uri) async {
      return await getUserProfile(uri);
    });

    // Register handler for @MCPResource('serverStats')

    registerResource('serverStats', (uri) async {
      final result = await getServerStats();
      return MCPResourceContent(
        uri: uri,
        name: 'serverStats',
        mimeType: 'application/json',
        text: jsonEncode(result),
      );
    });

    // Register handler for @MCPResource('systemInfo')

    registerResource('systemInfo', (uri) async {
      final result = getSystemInfo();
      return MCPResourceContent(
        uri: uri,
        name: 'systemInfo',
        mimeType: 'application/json',
        text: jsonEncode(result),
      );
    });

    // Register handler for @MCPResource('configFile')

    registerResource('configFile', (uri) async {
      return await getConfigFile(uri);
    });

    // Register handler for @MCPTool('ping')

    registerTool('ping', (context) async {
      return await ping();
    }, description: 'Simple ping test');
  }

  /// Generates standardized usage documentation for MCP servers.
  ///
  /// This helper method provides consistent help text formatting
  /// for this specific MCP server with its available capabilities.
  void showUsage({String? serverName}) {
    print('Usage: dart ${serverName ?? "server"}.dart [options]');
    print('');
    print('Options:');
    print('  --stdio        Start server in stdio mode (default)');
    print('  --http         Start HTTP server on port 8080');
    print('  --port <port>  Specify HTTP port (default: 8080)');
    print('  --help, -h     Show this help message');
    print('');
    print('Available tools: ping');
    print(
      'Available resources: userProfile, serverStats, systemInfo, configFile',
    );
    print('');

    print('Examples:');
    print('  dart ${serverName ?? "server"}.dart');
    print('  dart ${serverName ?? "server"}.dart --http');
    print('  dart ${serverName ?? "server"}.dart --http --port 3000');
  }
}
