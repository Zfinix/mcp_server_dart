// GENERATED CODE - DO NOT MODIFY BY HAND
// dart format width=80

// **************************************************************************
// MCPGenerator
// **************************************************************************

// ignore_for_file: type=lint
part of 'google_maps.dart';

/// Generated extension for [GoogleMapsMCP] that automatically registers
/// all annotated MCP tools, resources, and prompts with the server.
///
/// This code is automatically generated by the MCP Dart framework.
/// Do not modify this file directly - instead, modify the source
/// class and run `dart run build_runner build` to regenerate.
extension GoogleMapsMCPGenerated on GoogleMapsMCP {
  /// Registers all MCP handlers that were annotated in the source class.
  /// This method is automatically called during server initialization.
  void registerGeneratedHandlers() {
    // Register handler for @MCPTool('searchPlace')
    // Search for places by name or address
    registerTool(
      'searchPlace',
      (context) async {
        final query = context.param<String>('query');
        final limit = context.optionalParam<int>('limit') ?? 5;
        return await searchPlace(query, limit: limit);
      },
      description: 'Find places by name or address',
      inputSchema: {
        'type': 'object',
        'properties': {
          'query': {'type': 'string', 'description': 'Query parameter'},
          'limit': {'type': 'integer', 'description': 'Limit parameter'},
        },
        'required': ['query'],
      },
    );

    // Register handler for @MCPTool('getDirections')
    // Get directions between two locations
    registerTool(
      'getDirections',
      (context) async {
        final origin = context.param<String>('origin');
        final destination = context.param<String>('destination');
        final mode = context.optionalParam<String>('mode') ?? 'driving';
        return await getDirections(origin, destination, mode: mode);
      },
      description: 'Get directions between two points',
      inputSchema: {
        'type': 'object',
        'properties': {
          'origin': {'type': 'string', 'description': 'Origin parameter'},
          'destination': {
            'type': 'string',
            'description': 'Destination parameter',
          },
          'mode': {'type': 'string', 'description': 'Mode parameter'},
        },
        'required': ['origin', 'destination'],
      },
    );

    // Register handler for @MCPResource('currentLocation')
    // Get current location information
    registerResource('currentLocation', (uri) async {
      return await getCurrentLocation(uri);
    });

    // Register handler for @MCPTool('nearbySearch')
    // Get nearby points of interest
    registerTool(
      'nearbySearch',
      (context) async {
        final lat = context.param<double>('lat');
        final lng = context.param<double>('lng');
        final radius = context.optionalParam<int>('radius') ?? 1000;
        final type = context.optionalParam<String>('type') ?? null;
        return await nearbySearch(lat, lng, radius: radius, type: type);
      },
      description: 'Find nearby places of interest',
      inputSchema: {
        'type': 'object',
        'properties': {
          'lat': {'type': 'number', 'description': 'Lat parameter'},
          'lng': {'type': 'number', 'description': 'Lng parameter'},
          'radius': {'type': 'integer', 'description': 'Radius parameter'},
          'type': {'type': 'string', 'description': 'Type parameter'},
        },
        'required': ['lat', 'lng'],
      },
    );

    // Register handler for @MCPPrompt('locationSummary')
    // Generate a location summary prompt
    registerPrompt('locationSummary', (args) {
      final location = args['location'] as String;
      final summaryType = args['summaryType'] as String? ?? 'general';
      return locationSummaryPrompt(location, summaryType: summaryType);
    });

    // Register handler for @MCPTool('getTrafficInfo')
    // Get traffic information for a route
    registerTool(
      'getTrafficInfo',
      (context) async {
        final origin = context.param<String>('origin');
        final destination = context.param<String>('destination');
        return await getTrafficInfo(origin, destination);
      },
      description: 'Get current traffic information',
      inputSchema: {
        'type': 'object',
        'properties': {
          'origin': {'type': 'string', 'description': 'Origin parameter'},
          'destination': {
            'type': 'string',
            'description': 'Destination parameter',
          },
        },
        'required': ['origin', 'destination'],
      },
    );
  }

  /// Generates standardized usage documentation for MCP servers.
  ///
  /// This helper method provides consistent help text formatting
  /// for this specific MCP server with its available capabilities.
  void showUsage({String? serverName}) {
    print('Usage: dart ${serverName ?? "server"}.dart [options]');
    print('');
    print('Options:');
    print('  --stdio        Start server in stdio mode (default)');
    print('  --http         Start HTTP server on port 8080');
    print('  --port <port>  Specify HTTP port (default: 8080)');
    print('  --help, -h     Show this help message');
    print('');
    print(
      'Available tools: searchPlace, getDirections, nearbySearch, getTrafficInfo',
    );
    print('Available resources: currentLocation');
    print('Available prompts: locationSummary');
    print('');
    print('Examples:');
    print('  dart ${serverName ?? "server"}.dart');
    print('  dart ${serverName ?? "server"}.dart --http');
    print('  dart ${serverName ?? "server"}.dart --http --port 3000');
  }
}
