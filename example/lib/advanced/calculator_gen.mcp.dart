// GENERATED CODE - DO NOT MODIFY BY HAND
// dart format width=80

// **************************************************************************
// MCPGenerator
// **************************************************************************

// ignore_for_file: type=lint
part of 'calculator_gen.dart';

/// Generated extension for [CalculatorMCP] that automatically registers
/// all annotated MCP tools, resources, and prompts with the server.
///
/// This code is automatically generated by the MCP Dart framework.
/// Do not modify this file directly - instead, modify the source
/// class and run `dart run build_runner build` to regenerate.
extension CalculatorMCPGenerated on CalculatorMCP {
  /// Registers all MCP handlers that were annotated in the source class.
  /// This method is automatically called during server initialization.
  void registerGeneratedHandlers() {
    // Register handler for @MCPTool('add')
    registerTool(
      'add',
      (context) async {
        final a = context.param<num>('a');
        final b = context.param<num>('b');
        return await add(a: a, b: b);
      },
      description: 'Add two numbers',
      inputSchema: {
        'type': 'object',
        'properties': {
          'a': {'type': 'number', 'description': 'A parameter'},
          'b': {'type': 'number', 'description': 'B parameter'},
        },
        'required': ['a', 'b'],
      },
    );

    // Register handler for @MCPTool('subtract')
    registerTool(
      'subtract',
      (context) async {
        final a = context.param<num>('a');
        final b = context.param<num>('b');
        return await subtract(a: a, b: b);
      },
      description: 'Subtract two numbers',
      inputSchema: {
        'type': 'object',
        'properties': {
          'a': {'type': 'number', 'description': 'A parameter'},
          'b': {'type': 'number', 'description': 'B parameter'},
        },
        'required': ['a', 'b'],
      },
    );

    // Register handler for @MCPTool('multiply')
    registerTool(
      'multiply',
      (context) async {
        final a = context.param<num>('a');
        final b = context.param<num>('b');
        return await multiply(a: a, b: b);
      },
      description: 'Multiply two numbers',
      inputSchema: {
        'type': 'object',
        'properties': {
          'a': {'type': 'number', 'description': 'A parameter'},
          'b': {'type': 'number', 'description': 'B parameter'},
        },
        'required': ['a', 'b'],
      },
    );

    // Register handler for @MCPTool('divide')
    registerTool(
      'divide',
      (context) async {
        final a = context.param<num>('a');
        final b = context.param<num>('b');
        return await divide(a: a, b: b);
      },
      description: 'Divide two numbers',
      inputSchema: {
        'type': 'object',
        'properties': {
          'a': {'type': 'number', 'description': 'A parameter'},
          'b': {'type': 'number', 'description': 'B parameter'},
        },
        'required': ['a', 'b'],
      },
    );

    // Register handler for @MCPTool('power')
    registerTool(
      'power',
      (context) async {
        final base = context.param<num>('base');
        final exponent = context.param<num>('exponent');
        return await power(base: base, exponent: exponent);
      },
      description: 'Raise a number to a power',
      inputSchema: {
        'type': 'object',
        'properties': {
          'base': {'type': 'number', 'description': 'Base parameter'},
          'exponent': {'type': 'number', 'description': 'Exponent parameter'},
        },
        'required': ['base', 'exponent'],
      },
    );

    // Register handler for @MCPTool('sqrt')
    registerTool(
      'sqrt',
      (context) async {
        final number = context.param<num>('number');
        return await sqrt(number: number);
      },
      description: 'Calculate square root of a number',
      inputSchema: {
        'type': 'object',
        'properties': {
          'number': {'type': 'number', 'description': 'Number parameter'},
        },
        'required': ['number'],
      },
    );

    // Register handler for @MCPTool('factorial')
    registerTool(
      'factorial',
      (context) async {
        final number = context.param<int>('number');
        return await factorial(number: number);
      },
      description: 'Calculate factorial of a number',
      inputSchema: {
        'type': 'object',
        'properties': {
          'number': {'type': 'integer', 'description': 'Number parameter'},
        },
        'required': ['number'],
      },
    );

    // Register handler for @MCPResource('calculator_stats')
    registerResource('calculator_stats', (uri) async {
      return await calculatorStats(uri);
    });
  }

  /// Generates standardized usage documentation for MCP servers.
  ///
  /// This helper method provides consistent help text formatting
  /// for this specific MCP server with its available capabilities.
  void showUsage({String? serverName}) {
    print('Usage: dart ${serverName ?? "server"}.dart [options]');
    print('');
    print('Options:');
    print('  --stdio        Start server in stdio mode (default)');
    print('  --http         Start HTTP server on port 8080');
    print('  --port <port>  Specify HTTP port (default: 8080)');
    print('  --help, -h     Show this help message');
    print('');
    print(
      'Available tools: add, subtract, multiply, divide, power, sqrt, factorial',
    );
    print('Available resources: calculator_stats');
    print('');
    print('Examples:');
    print('  dart ${serverName ?? "server"}.dart');
    print('  dart ${serverName ?? "server"}.dart --http');
    print('  dart ${serverName ?? "server"}.dart --http --port 3000');
  }
}
