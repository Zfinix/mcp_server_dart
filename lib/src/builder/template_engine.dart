import 'dart:io';

/// Simple template engine for code generation
class TemplateEngine {
  static const String _templatesPath = 'lib/src/templates';

  /// Load a template file and replace placeholders with values
  static String renderTemplate(
    String templateName,
    Map<String, String> variables,
  ) {
    final templatePath = '$_templatesPath/$templateName';
    final templateFile = File(templatePath);

    if (!templateFile.existsSync()) {
      throw FileSystemException('Template file not found: $templatePath');
    }

    String content = templateFile.readAsStringSync();

    // Replace all placeholders with their values
    variables.forEach((key, value) {
      content = content.replaceAll('{{$key}}', value);
    });

    return content;
  }

  /// Load template content from a string resource (for package distribution)
  static String renderTemplateFromString(
    String templateContent,
    Map<String, String> variables,
  ) {
    String content = templateContent;

    // Replace all placeholders with their values
    variables.forEach((key, value) {
      content = content.replaceAll('{{$key}}', value);
    });

    return content;
  }

  /// Get template content as a string constant (for embedding in package)
  static const String baseClassTemplate = '''// ignore_for_file: type=lint
part of '{{sourceFile}}';

/// Generated extension for [{{className}}] that provides automatic registration
/// of all annotated MCP tools, resources, and prompts.
///
/// This code is automatically generated by the MCP Dart framework.
/// Do not modify this file directly - instead, modify the source
/// class and run `dart run build_runner build` to regenerate.
extension {{className}}Registration on {{className}} {
  /// Registers all generated handlers for annotated methods.
  /// Call this method in your constructor to automatically register
  /// all MCP tools, resources, and prompts.
  void registerGeneratedHandlers() {
{{handlerRegistrations}}
  }

  /// Generates standardized usage documentation for MCP servers.
  ///
  /// This helper method provides consistent help text formatting
  /// for this specific MCP server with its available capabilities.
  void showUsage({String? serverName}) {
    print('Usage: dart \${serverName ?? "server"}.dart [options]');
    print('');
    print('Options:');
    print('  --stdio        Start server in stdio mode (default)');
    print('  --http         Start HTTP server on port 8080');
    print('  --port <port>  Specify HTTP port (default: 8080)');
    print('  --help, -h     Show this help message');
    print('');
{{usageCapabilities}}
    print('Examples:');
    print('  dart \${serverName ?? "server"}.dart');
    print('  dart \${serverName ?? "server"}.dart --http');
    print('  dart \${serverName ?? "server"}.dart --http --port 3000');
  }
}''';

  static const String toolHandlerTemplate =
      '''    // Register handler for @MCPTool('{{annotationName}}')
{{methodDoc}}
    registerTool(
      '{{annotationName}}',
      (context) async {
{{parameterExtractions}}
        {{returnStatement}};
      },
      description: '{{description}}',
{{inputSchema}}
    );''';

  static const String resourceHandlerTemplate =
      '''    // Register handler for @MCPResource('{{annotationName}}')
{{methodDoc}}
    registerResource('{{annotationName}}', (uri) async {
      {{returnStatement}};
    });''';

  static const String promptHandlerTemplate =
      '''    // Register handler for @MCPPrompt('{{annotationName}}')
{{methodDoc}}
    registerPrompt('{{annotationName}}', (args) {
{{parameterExtractions}}
      {{returnStatement}};
    });''';
}
